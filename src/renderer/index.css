@import 'tailwindcss';
@plugin 'daisyui';

/* Highlight.js theme for syntax highlighting - theme-aware colors */
/* Light theme colors (GitHub style) */
[data-theme='light'] {
  --hljs-bg: #ffffff;
  --hljs-color: #24292e;
  --hljs-comment: #6a737d;
  --hljs-keyword: #d73a49;
  --hljs-string: #032f62;
  --hljs-title: #6f42c1;
  --hljs-literal: #005cc5;
  --hljs-number: #005cc5;
  --hljs-built-in: #e36209;
}

/* Dark theme colors (GitHub Dark style) */
[data-theme='dark'] {
  --hljs-bg: #0d1117;
  --hljs-color: #c9d1d9;
  --hljs-comment: #8b949e;
  --hljs-keyword: #ff7b72;
  --hljs-string: #a5d6ff;
  --hljs-title: #d2a8ff;
  --hljs-literal: #79c0ff;
  --hljs-number: #79c0ff;
  --hljs-built-in: #ffa657;
}

/* Apply highlight.js theme using CSS variables */
.hljs {
  background: var(--hljs-bg);
  color: var(--hljs-color);
}

.hljs-comment,
.hljs-quote {
  color: var(--hljs-comment);
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag,
.hljs-type {
  color: var(--hljs-keyword);
}

.hljs-string,
.hljs-attr,
.hljs-template-variable {
  color: var(--hljs-string);
}

.hljs-title,
.hljs-section,
.hljs-function .hljs-title {
  color: var(--hljs-title);
  font-weight: 600;
}

.hljs-literal,
.hljs-symbol,
.hljs-bullet,
.hljs-meta {
  color: var(--hljs-literal);
}

.hljs-number,
.hljs-params {
  color: var(--hljs-number);
}

.hljs-built_in,
.hljs-builtin-name {
  color: var(--hljs-built-in);
}

.hljs-tag,
.hljs-name,
.hljs-attribute {
  color: var(--hljs-keyword);
}

.hljs-variable,
.hljs-template-tag {
  color: var(--hljs-literal);
}

.hljs-regexp,
.hljs-link {
  color: var(--hljs-string);
}

.hljs-deletion {
  color: var(--hljs-keyword);
}

.hljs-addition {
  color: var(--hljs-string);
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: 700;
}

body {
  margin: 0;
  padding: 0;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

#root {
  width: 100%;
  height: 100%;
}

/* TipTap Editor Styles */
.ProseMirror {
  outline: none;
  padding: 2rem;
  min-height: 100%;
}

.ProseMirror p.is-editor-empty:first-child::before {
  content: attr(data-placeholder);
  float: left;
  color: oklch(var(--bc) / 0.4);
  pointer-events: none;
  height: 0;
}

.ProseMirror h1,
.ProseMirror h2,
.ProseMirror h3,
.ProseMirror h4,
.ProseMirror h5,
.ProseMirror h6 {
  font-weight: 700;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  line-height: 1.3;
}

.ProseMirror h1 { font-size: 2.25em; }
.ProseMirror h2 { font-size: 1.875em; }
.ProseMirror h3 { font-size: 1.5em; }
.ProseMirror h4 { font-size: 1.25em; }
.ProseMirror h5 { font-size: 1.125em; }
.ProseMirror h6 { font-size: 1em; }

.ProseMirror code {
  background-color: oklch(var(--b2));
  color: oklch(var(--bc));
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-size: 0.875em;
  font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
}

.ProseMirror pre {
  background-color: oklch(var(--b2));
  color: oklch(var(--bc));
  padding: 1rem;
  border-radius: 0.5rem;
  overflow-x: auto;
  font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
  margin: 1em 0;
}

.ProseMirror pre code {
  background: none;
  padding: 0;
  font-size: inherit;
}

.ProseMirror blockquote {
  border-left: 4px solid oklch(var(--p));
  padding-left: 1rem;
  margin: 1em 0;
  color: oklch(var(--bc) / 0.7);
  font-style: italic;
}

.ProseMirror ul,
.ProseMirror ol {
  padding-left: 1.5rem;
  margin: 1em 0;
}

.ProseMirror ul {
  list-style-type: disc;
}

.ProseMirror ol {
  list-style-type: decimal;
}

.ProseMirror li {
  margin: 0.5em 0;
}

.ProseMirror a {
  color: oklch(var(--p));
  text-decoration: underline;
  cursor: pointer;
}

.ProseMirror a:hover {
  color: oklch(var(--pf));
}

.ProseMirror img {
  max-width: 100%;
  height: auto;
  border-radius: 0.5rem;
  margin: 1em 0;
}

.ProseMirror hr {
  border: none;
  border-top: 2px solid oklch(var(--bc) / 0.2);
  margin: 2em 0;
}

.ProseMirror table {
  border-collapse: collapse;
  table-layout: auto;
  width: 100%;
  margin: 1em 0;
  overflow: hidden;
}

.ProseMirror td,
.ProseMirror th {
  min-width: 1em;
  border: 1px solid oklch(var(--bc) / 0.2);
  padding: 0.5rem 0.75rem;
  vertical-align: top;
  box-sizing: border-box;
  position: relative;
}

.ProseMirror th {
  font-weight: 700;
  text-align: left;
  background-color: oklch(var(--b2));
}

.ProseMirror .selectedCell {
  background-color: oklch(var(--p) / 0.1);
}

.ProseMirror .column-resize-handle {
  position: absolute;
  right: -2px;
  top: 0;
  bottom: -2px;
  width: 4px;
  background-color: oklch(var(--p));
  pointer-events: none;
}

/* Markdown Editor Textarea */
.markdown-editor {
  width: 100%;
  height: 100%;
  padding: 2rem;
  background-color: oklch(var(--b1));
  color: oklch(var(--bc));
  border: none;
  outline: none;
  resize: none;
  font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
  font-size: 0.875rem;
  line-height: 1.6;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.markdown-editor::placeholder {
  color: oklch(var(--bc) / 0.4);
}
